"""
Django settings for sit_core project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import environ

from datetime import timedelta

# from messenger.models import CustomUser

env = environ.Env()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "@=crw$+j%p5jkyvs@&bo(@c+6nnd@si86pi9r=l5bqq(55+vbc")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get("DEBUG", default=1))

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "").split(" ")

# #alter the authentication from default django user model to our adjusted model CustomUser
AUTH_USER_MODEL = 'messenger.CustomUser'

# Application definition

INSTALLED_APPS = [
    'sit_core',
    'polls',
    'messenger',

    'djcelery_email',
    'django_celery_beat',
    'rest_framework',
    'rest_framework.authtoken',
    'djoser',
    'storages',
    'bootstrap4',
    'crispy_forms',
    'silk',
    'django_extensions',
    'drf_spectacular',
    'corsheaders',
    'rest_framework_simplejwt.token_blacklist',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

CRISPY_TEMPLATE_PACK = 'bootstrap4'

MIDDLEWARE = [
    'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'silk.middleware.SilkyMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.cache.FetchFromCacheMiddleware',
]

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://redis:6379/1',
        'TIMEOUT': 3,
        "OPTIONS": {
            # "CLIENT_CLASS": "django_redis.client.HerdClient",
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
}

# CACHE_HERD_TIMEOUT = None

# CACHE_MIDDLEWARE_SECONDS = '10'

ROOT_URLCONF = 'sit_core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sit_core.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("SQL_DATABASE", os.path.join(BASE_DIR, "db.sqlite3")),
        "USER": os.environ.get("SQL_USER", "user"),
        "PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
        "HOST": os.environ.get("SQL_HOST", "localhost"),
        "PORT": os.environ.get("SQL_PORT", "5432"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "mediafiles")

################################################################################
# How to setup Celery with Django
################################################################################

CELERY_BROKER_URL = os.environ.get("CELERY_BROKER", "redis://127.0.0.1:6379/0")
CELERY_RESULT_BACKEND = os.environ.get("CELERY_BACKEND", "redis://127.0.0.1:6379/0")

################################################################################
# How to run period tasks with Celery and Django
################################################################################

# CELERY_BEAT_SCHEDULE = {
#     'task-clear-session': {
#         'task': 'task_clear_session',
#         "schedule": 5.0,          # five seconds interval
#     },
# }

################################################################################
# How to make Celery work with multiple queues
################################################################################

# from kombu import Queue       # noqa
#
# CELERY_TASK_DEFAULT_QUEUE = 'default'
#
# # Force all queues to be explicitly listed in `CELERY_TASK_QUEUES` to help prevent typos
# CELERY_TASK_CREATE_MISSING_QUEUES = False
#
# CELERY_TASK_QUEUES = (
#     # need to define default queue here or exception would be raised
#     Queue('default'),
#
#     Queue('high_priority'),
#     Queue('low_priority'),
# )
#
# CELERY_TASK_ROUTES = {
#     'sit_core.celery.*': {
#         'queue': 'high_priority',
#     },
# }

CELERY_WORKER_PREFETCH_MULTIPLIER = 1

################################################################################
# How to send email in Django project with Celery
################################################################################

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_PORT = 1025

EMAIL_BACKEND = 'djcelery_email.backends.CeleryEmailBackend'
CELERY_EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_PORT = 1025

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
        'propagate': True,
    },

    'loggers': {
        '': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': True,
        },
    },
}

# Default Salt for the putpose of file cryptography
SALT = str(os.environ.get("DEFF_SALT", default="django-fernet-fields-hkdf-salt"))

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',

    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    # 'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
}

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

INTERNAL_IPS = ('127.0.0.1', '0.0.0.0', 'localhost', '172.17.0.1')

SIMPLE_JWT = {
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=3),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True
    # 'USER_ID_FIELD': 'email',
}

# from messenger.models import CustomUser
# from django.conf import settings

# DJOSER = {
#     'PERMISSIONS': {
#         'user': ['rest_framework.permissions.IsAuthenticated'],
#     }
#     # 'USER_ID_FIELD': 'email',
#     # 'LOGIN_FIELD': 'email'
# }

#######################################################
# Django Silk Configuration
# #### https://pypi.org/project/django-silk/
SILKY_PYTHON_PROFILER = True

SILKY_AUTHENTICATION = True
SILKY_AUTHORISATION = True
SILKY_PERMISSIONS = lambda user: user.is_superuser

########################################################


CORS_ALLOW_CREDENTIALS = True

CORS_ORIGIN_WHITELIST = [
    # 'http://172.19.0.9',
    # 'http://localhost:3000',
    'http://localhost:8090',
    'http://192.168.1.22:8080',
    os.environ.get("APP_URL", default='http://localhost:3000'),
    # 'http://192.168.1.22:8080/',
]

##########################################################

# drf-spectacular
# Create separate components for PATCH endpoints (without required list)
SPECTACULAR_SETTINGS = {
    'SERVE_PERMISSIONS': ['rest_framework.permissions.IsAuthenticated'],
    'SCHEMA_PATH_PREFIX': r'',
    'COMPONENT_SPLIT_PATCH': True,
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': True,
    },
}
